"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9328],{35318:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,m=d["".concat(p,".").concat(u)]||d[u]||y[u]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(25773),o=(n(27378),n(35318));const i={sidebar_position:100,title:"Cryptography"},a="Cryptographic Primitives",s={unversionedId:"developer/crypto",id:"developer/crypto",title:"Cryptography",description:"The @devicescript/crypto provides functions to perform AES encryption and SHA256 digests.",source:"@site/docs/developer/crypto.mdx",sourceDirName:"developer",slug:"/developer/crypto",permalink:"/devicescript/developer/crypto",draft:!1,tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100,title:"Cryptography"},sidebar:"tutorialSidebar",previous:{title:"Matlab ThingSpeak",permalink:"/devicescript/developer/iot/matlab-thingspeak/"},next:{title:"Development Gateway",permalink:"/devicescript/developer/development-gateway/"}},p={},c=[{value:"Symmetric encryption",id:"symmetric-encryption",level:2},{value:"SHA256 digest and HMAC",id:"sha256-digest-and-hmac",level:2},{value:"Key-derivation function",id:"key-derivation-function",level:2}],l={toc:c},d="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cryptographic-primitives"},"Cryptographic Primitives"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@devicescript/crypto")," provides functions to perform AES encryption and SHA256 digests."),(0,o.kt)("h2",{id:"symmetric-encryption"},"Symmetric encryption"),(0,o.kt)("p",null,"Let's start with simple encryption/decryption example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { decrypt, encrypt, randomBuffer, ivSize } from "@devicescript/crypto"\nimport { readSetting } from "@devicescript/settings"\nimport { assert } from "@devicescript/core"\n\n// this is currently the only algorithm supported\nconst algo = "aes-256-ccm"\n// get key from settings\nconst key = Buffer.from(await readSetting<string>("ENC_KEY"), "hex")\n// you should never ever reuse IV; always generate them randomly!\nconst iv = randomBuffer(ivSize(algo))\n// encrypt data\nconst encrypted = encrypt({\n    algo,\n    key,\n    iv,\n    data: Buffer.from("Hello world!"),\n    tagLength: 4,\n})\n\n// decryption takes the similar arguments\nconst plain = decrypt({\n    algo,\n    key,\n    iv,\n    data: encrypted,\n    tagLength: 4,\n})\n\nconsole.log(encrypted, plain)\n\nassert(plain.toString("utf-8") === "Hello world!")\n')),(0,o.kt)("h2",{id:"sha256-digest-and-hmac"},"SHA256 digest and HMAC"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"digest()")," function lets you compute cryptographically strong digests (hashes).\nThe only algorithm currently supported is ",(0,o.kt)("inlineCode",{parentName:"p"},"sha256"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { digest } from "@devicescript/crypto"\n\nconst hash = digest("sha256", Buffer.from("Hello world!"))\nconsole.log(hash.toString("hex"))\n')),(0,o.kt)("p",null,"You can pass more buffers to ",(0,o.kt)("inlineCode",{parentName:"p"},"digest()")," - they will be concatenated."),(0,o.kt)("p",null,"You can also pass a key to the SHA256 function, to compute an HMAC (authenticated digest):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { hmac } from "@devicescript/crypto"\n\nconst hash = hmac(Buffer.from("Secret!"), "sha256", Buffer.from("Hello world!"))\nconsole.log(hash.toString("hex"))\n')),(0,o.kt)("h2",{id:"key-derivation-function"},"Key-derivation function"),(0,o.kt)("p",null,"In case you want to go with passwords, instead of binary 32 byte keys,\nyou can use the RFC 5869 HKDF.\nThe string ",(0,o.kt)("inlineCode",{parentName:"p"},'"Req-1"')," describes the type of key you want to generate,\nit can be anything."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { sha256Hkdf } from "@devicescript/crypto"\n\nconst password = "SuPeRSecret!!"\nconst key = sha256Hkdf(password, "Req-1")\nconsole.log(key.toString("hex"))\n')),(0,o.kt)("p",null,"This gives the same result as the following in node.js:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import * as crypto from "node:crypto"\nconst password = "SuPeRSecret!!"\nconst key = Buffer.from(crypto.hkdfSync("sha256", password, "", "Req-1", 32))\nconsole.log(key.toString("hex"))\n')))}y.isMDXComponent=!0}}]);