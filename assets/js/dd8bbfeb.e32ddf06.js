"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6158],{35318:(e,i,t)=>{t.d(i,{Zo:()=>c,kt:()=>m});var r=t(27378);function n(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function o(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);i&&(r=r.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?o(Object(t),!0).forEach((function(i){n(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function l(e,i){if(null==e)return{};var t,r,n=function(e,i){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],i.indexOf(t)>=0||(n[t]=e[t]);return n}(e,i);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=r.createContext({}),d=function(e){var i=r.useContext(p),t=i;return e&&(t="function"==typeof e?e(i):a(a({},i),e)),t},c=function(e){var i=d(e.components);return r.createElement(p.Provider,{value:i},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var i=e.children;return r.createElement(r.Fragment,{},i)}},g=r.forwardRef((function(e,i){var t=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(t),g=n,m=s["".concat(p,".").concat(g)]||s[g]||u[g]||o;return t?r.createElement(m,a(a({ref:i},c),{},{components:t})):r.createElement(m,a({ref:i},c))}));function m(e,i){var t=arguments,n=i&&i.mdxType;if("string"==typeof e||n){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var p in i)hasOwnProperty.call(i,p)&&(l[p]=i[p]);l.originalType=e,l[s]="string"==typeof e?e:n,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},20105:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(25773),n=(t(27378),t(35318));const o={description:"Arduino-like GPIO APIs",title:"Wire",sidebar_position:9},a="Wire",l={unversionedId:"developer/drivers/digital-io/wire",id:"developer/drivers/digital-io/wire",title:"Wire",description:"Arduino-like GPIO APIs",source:"@site/docs/developer/drivers/digital-io/wire.mdx",sourceDirName:"developer/drivers/digital-io",slug:"/developer/drivers/digital-io/wire",permalink:"/devicescript/developer/drivers/digital-io/wire",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{description:"Arduino-like GPIO APIs",title:"Wire",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Digital IO (GPIO)",permalink:"/devicescript/developer/drivers/digital-io/"},next:{title:"Analog",permalink:"/devicescript/developer/drivers/analog"}},p={},d=[{value:"pinMode",id:"pinmode",level:2},{value:"digitalWrite",id:"digitalwrite",level:3},{value:"digitalRead",id:"digitalread",level:2},{value:"subscribeDigital",id:"subscribedigital",level:2}],c={toc:d},s="wrapper";function u(e){let{components:i,...t}=e;return(0,n.kt)(s,(0,r.Z)({},c,t,{components:i,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"wire"},"Wire"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"digitalWrite"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"digitalRead"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"pinMode")," functions are provided for Arduino-like\ndigital IO."),(0,n.kt)("h2",{id:"pinmode"},"pinMode"),(0,n.kt)("p",null,"Sets the pin input/output and pull up/down mode."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n// highlight-next-line\nimport { pinMode } from "@devicescript/gpio"\n\nconst pin = gpio(0)\n// highlight-next-line\npinMode(pin, GPIOMode.Output)\n')),(0,n.kt)("h3",{id:"digitalwrite"},"digitalWrite"),(0,n.kt)("p",null,"For digital output, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"digitalWrite")," function."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { HIGH, GPIOMode } from "@devicescript/core"\n// highlight-next-line\nimport { pinMode, digitalWrite } from "@devicescript/gpio"\n\nconst pin = gpio(0)\npinMode(pin, GPIOMode.Output)\n\n// highlight-start\ndigitalWrite(pin, true)\ndigitalWrite(pin, 1)\ndigitalWrite(pin, HIGH)\n// highlight-end\n')),(0,n.kt)("h2",{id:"digitalread"},"digitalRead"),(0,n.kt)("p",null,"For digital input, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"digitalRead")," function."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n// highlight-next-line\nimport { pinMode, digitalRead } from "@devicescript/gpio"\n\nconst pin = gpio(0)\npinMode(pin, GPIOMode.Input)\n\n// highlight-start\nconst value = digitalRead(pin)\n// highlight-end\n')),(0,n.kt)("h2",{id:"subscribedigital"},"subscribeDigital"),(0,n.kt)("p",null,"You can also subscribe to digital input changes."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n// highlight-next-line\nimport { pinMode, subscribeDigital } from "@devicescript/gpio"\n\nconst pin = gpio(0)\npinMode(pin, GPIOMode.Input)\n\n// highlight-start\nsubscribeDigital(pin, value => console.data({ value }))\n// highlight-end\n')))}u.isMDXComponent=!0}}]);