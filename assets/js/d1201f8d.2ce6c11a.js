"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2362],{35318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=m(n),c=i,k=d["".concat(o,".").concat(c)]||d[c]||u[c]||l;return n?a.createElement(k,r(r({ref:t},s),{},{components:n})):a.createElement(k,r({ref:t},s))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:i,r[1]=p;for(var m=2;m<l;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(25773),i=(n(27378),n(35318));const l={pagination_prev:null,pagination_next:null,description:"DeviceScript client for LED Strip service"},r="LedStrip",p={unversionedId:"api/clients/ledstrip",id:"api/clients/ledstrip",title:"LedStrip",description:"DeviceScript client for LED Strip service",source:"@site/docs/api/clients/ledstrip.md",sourceDirName:"api/clients",slug:"/api/clients/ledstrip",permalink:"/devicescript/api/clients/ledstrip",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for LED Strip service"},sidebar:"tutorialSidebar"},o={},m=[{value:"About",id:"about",level:2},{value:"Light programs",id:"light-programs",level:2},{value:"Commands",id:"commands",level:2},{value:"run",id:"run",level:3},{value:"Registers",id:"registers",level:2},{value:"intensity",id:"rw:intensity",level:3},{value:"actualBrightness",id:"ro:actualBrightness",level:3},{value:"lightType",id:"rw:lightType",level:3},{value:"numPixels",id:"rw:numPixels",level:3},{value:"numColumns",id:"rw:numColumns",level:3},{value:"maxPower",id:"rw:maxPower",level:3},{value:"maxPixels",id:"const:maxPixels",level:3},{value:"numRepeats",id:"rw:numRepeats",level:3},{value:"variant",id:"const:variant",level:3},{value:"Syntax",id:"syntax",level:2},{value:"Commands",id:"commands-1",level:3},{value:"Examples",id:"examples",level:3}],s={toc:m},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ledstrip"},"LedStrip"),(0,i.kt)("p",null,"A controller for strips of individually controlled RGB LEDs."),(0,i.kt)("p",null),(0,i.kt)("h2",{id:"about"},"About"),(0,i.kt)("h2",{id:"light-programs"},"Light programs"),(0,i.kt)("p",null,"With 1 mbit Jacdac, we can transmit under 2k of data per animation frame (at 20fps).\nIf transmitting raw data that would be around 500 pixels, which is not enough for many\ninstallations and it would completely clog the network."),(0,i.kt)("p",null,"Thus, light service defines a domain-specific language for describing light animations\nand efficiently transmitting them over wire. For short LED displays, less than 64 LEDs,\nyou can also use the ",(0,i.kt)("a",{parentName:"p",href:"/api/clients/led"},"LED service"),"."),(0,i.kt)("p",null,"Light commands are not Jacdac commands.\nLight commands are efficiently encoded as sequences of bytes and typically sent as payload\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command."),(0,i.kt)("p",null,"Definitions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"P")," - position in the strip"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R")," - number of repetitions of the command"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N")," - number of pixels affected by the command"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C")," - single color designation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C+")," - sequence of color designations")),(0,i.kt)("p",null,"Update modes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," - replace"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1")," - add RGB"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2")," - subtract RGB"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3")," - multiply RGB (by c/128); each pixel value will change by at least 1")),(0,i.kt)("p",null,"Program commands:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD0: setall C+")," - set all pixels in current range to given color pattern"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD1: fade C+")," - set pixels in current range to colors between colors in sequence"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD2: fadehsv C+")," - similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"fade()"),", but colors are specified and faded in HSV"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD3: rotfwd K")," - rotate (shift) pixels by ",(0,i.kt)("inlineCode",{parentName:"li"},"K")," positions away from the connector"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD4: rotback K")," - same, but towards the connector"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD5: show M=50")," - send buffer to strip and wait ",(0,i.kt)("inlineCode",{parentName:"li"},"M")," milliseconds"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD6: range P=0 N=length W=1 S=0")," - range from pixel ",(0,i.kt)("inlineCode",{parentName:"li"},"P"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"N")," pixels long (currently unsupported: every ",(0,i.kt)("inlineCode",{parentName:"li"},"W")," pixels skip ",(0,i.kt)("inlineCode",{parentName:"li"},"S")," pixels)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD7: mode K=0")," - set update mode"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xD8: tmpmode K=0")," - set update mode for next command only"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xCF: setone P C")," - set one pixel at ",(0,i.kt)("inlineCode",{parentName:"li"},"P")," (in current range) to given color"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mult V")," - macro to multiply current range by given value (float)")),(0,i.kt)("p",null,"A number ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," is encoded as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= k < 128")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"k")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"128 <= k < 16383")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"0x80 | (k >> 8), k & 0xff")),(0,i.kt)("li",{parentName:"ul"},"bigger and negative numbers are not supported")),(0,i.kt)("p",null,"Thus, bytes ",(0,i.kt)("inlineCode",{parentName:"p"},"0xC0-0xFF")," are free to use for commands."),(0,i.kt)("p",null,"Formats:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xC1, R, G, B")," - single color parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xC2, R0, G0, B0, R1, G1, B1")," - two color parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xC3, R0, G0, B0, R1, G1, B1, R2, G2, B2")," - three color parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xC0, N, R0, G0, B0, ..., R(N-1), G(N-1), B(N-1)")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"N")," color parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xCF, <number>, R, G, B")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"set1")," special format")),(0,i.kt)("p",null,"Commands are encoded as command byte, followed by parameters in the order\nfrom the command definition."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"setone()")," command has irregular encoding to save space - it is byte ",(0,i.kt)("inlineCode",{parentName:"p"},"0xCF")," followed by encoded\nnumber, and followed by 3 bytes of color."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n')),(0,i.kt)("p",null),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("h3",{id:"run"},"run"),(0,i.kt)("p",null,'Run the given light "program". See service description for details.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"ledStrip.run(program: Buffer): Promise<void>\n")),(0,i.kt)("h2",{id:"registers"},"Registers"),(0,i.kt)("p",null),(0,i.kt)("h3",{id:"rw:intensity"},"intensity"),(0,i.kt)("p",null,"Set the luminosity of the strip.\nAt ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," the power to the strip is completely shut down."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u0.8"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.intensity.read()\nawait ledStrip.intensity.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.intensity.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"ro:actualBrightness"},"actualBrightness"),(0,i.kt)("p",null,"This is the luminosity actually applied to the strip.\nMay be lower than ",(0,i.kt)("inlineCode",{parentName:"p"},"brightness")," if power-limited by the ",(0,i.kt)("inlineCode",{parentName:"p"},"max_power")," register.\nIt will rise slowly (few seconds) back to ",(0,i.kt)("inlineCode",{parentName:"p"},"brightness")," is limits are no longer required."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u0.8"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read only"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.actualBrightness.read()\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.actualBrightness.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"rw:lightType"},"lightType"),(0,i.kt)("p",null,"Specifies the type of light strip connected to controller.\nControllers which are sold with lights should default to the correct type\nand could not allow change."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.lightType.read()\nawait ledStrip.lightType.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.lightType.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"rw:numPixels"},"numPixels"),(0,i.kt)("p",null,"Specifies the number of pixels in the strip.\nControllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.numPixels.read()\nawait ledStrip.numPixels.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.numPixels.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"rw:numColumns"},"numColumns"),(0,i.kt)("p",null,"If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length\nand could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.numColumns.read()\nawait ledStrip.numColumns.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.numColumns.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"rw:maxPower"},"maxPower"),(0,i.kt)("p",null,"Limit the power drawn by the light-strip (and controller)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.maxPower.read()\nawait ledStrip.maxPower.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.maxPower.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"const:maxPixels"},"maxPixels"),(0,i.kt)("p",null,"The maximum supported number of pixels.\nAll writes to ",(0,i.kt)("inlineCode",{parentName:"p"},"num_pixels")," are clamped to ",(0,i.kt)("inlineCode",{parentName:"p"},"max_pixels"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read only"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.maxPixels.read()\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"rw:numRepeats"},"numRepeats"),(0,i.kt)("p",null,"How many times to repeat the program passed in ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command.\nShould be set before the ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command.\nSetting to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," means to repeat forever."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read and write"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.numRepeats.read()\nawait ledStrip.numRepeats.write(value)\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"track incoming values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nledStrip.numRepeats.subscribe(async (value) => {\n    ...\n})\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h3",{id:"const:variant"},"variant"),(0,i.kt)("p",null,"Specifies the shape of the light strip."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,i.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"read only"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript/core"\n\nconst ledStrip = new LedStrip()\n// ...\nconst value = await ledStrip.variant.read()\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"The input is split at spaces. The following tokens are supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a command name (see below)"),(0,i.kt)("li",{parentName:"ul"},"a decimal number (0-16383)"),(0,i.kt)("li",{parentName:"ul"},"a color, in HTML syntax '#ff0000' for red, etc"),(0,i.kt)("li",{parentName:"ul"},"a single '#' which will take color (24-bit number) from list of arguments;\nthe list of arguments has an array or colors it will encode all elements of the array"),(0,i.kt)("li",{parentName:"ul"},"a single '%' which takes a number (0-16383) from the list of arguments")),(0,i.kt)("h3",{id:"commands-1"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"setall C+")," - set all pixels in current range to given color pattern")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"fade C+")," - set pixels in current range to colors between colors in sequence")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"fadehsv C+")," - similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"fade()"),", but colors are specified and faded in HSV")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"rotfwd K")," - rotate (shift) pixels by ",(0,i.kt)("inlineCode",{parentName:"p"},"K")," positions away from the connector")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"rotback K")," - same, but towards the connector")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"show M=50")," - send buffer to strip and wait ",(0,i.kt)("inlineCode",{parentName:"p"},"M")," milliseconds")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"range P=0 N=length W=1 S=0")," - range from pixel ",(0,i.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," pixels long (currently unsupported: every ",(0,i.kt)("inlineCode",{parentName:"p"},"W")," pixels skip ",(0,i.kt)("inlineCode",{parentName:"p"},"S")," pixels)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mode K=0")," - set update mode")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tmpmode K=0")," - set update mode for next command only")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"setone P C")," - set one pixel at ",(0,i.kt)("inlineCode",{parentName:"p"},"P")," (in current range) to given color")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mult V")," - macro to multiply current range by given value (float)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"C+")," means one or more colors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"V")," is a floating point number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Other letters (",(0,i.kt)("inlineCode",{parentName:"p"},"K"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"M"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"N"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),") represent integers, with their default values if omitted"))),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { LedStrip } from "@devicescript-core"\nconst led = new LedStrip()\n\n// turn off all lights\nawait led.runEncoded("setall #000000")\n// the same\nawait led.runEncoded("setall #", 0)\n// set first pixel to red, last to blue, and interpolate the ones in between\nawait led.runEncoded("fade # #", 0xff0000, 0x0000ff)\n// the same; note the usage of an array []\nawait led.runEncoded("fade #", [0xff0000, 0x0000ff])\n// set pixels 2-7 to white\nawait led.runEncoded("range 2 5 setall #ffffff")\n// the same\nawait led.runEncoded("range % % setall #", 2, 5, 0xffffff)\n')))}u.isMDXComponent=!0}}]);