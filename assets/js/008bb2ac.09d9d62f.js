"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8065],{35318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(25773),i=(n(27378),n(35318));const o={},a="MQTT client",c={unversionedId:"developer/net/mqtt",id:"developer/net/mqtt",title:"MQTT client",description:"The startMQTTClient function connects to a MQTT broker using TCP or TLS.",source:"@site/docs/developer/net/mqtt.mdx",sourceDirName:"developer/net",slug:"/developer/net/mqtt",permalink:"/devicescript/developer/net/mqtt",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Encrypted Fetch",permalink:"/devicescript/developer/net/encrypted-fetch"},next:{title:"Packages",permalink:"/devicescript/developer/packages/"}},l={},p=[{value:"publish",id:"publish",level:2},{value:"deviceIdentifier",id:"deviceidentifier",level:3},{value:"subscribe",id:"subscribe",level:2},{value:"stop",id:"stop",level:2},{value:"Acknowledgements",id:"acknowledgements",level:2}],s={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mqtt-client"},"MQTT client"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"startMQTTClient")," function connects to a MQTT broker using TCP or TLS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { startMQTTClient } from "@devicescript/net"\n\nconst mqtt = await startMQTTClient({\n    host: "broker.hivemq.com",\n    proto: "tcp",\n    port: 1883,\n})\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can use ",(0,i.kt)("a",{parentName:"p",href:"https://www.hivemq.com/public-mqtt-broker/"},"HiveMQ public broker")," for testing\nwith public data.")),(0,i.kt)("h2",{id:"publish"},"publish"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," function sends a message on a topic."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { startMQTTClient } from "@devicescript/net"\n\nconst mqtt = await startMQTTClient({\n    host: "broker.hivemq.com",\n    proto: "tcp",\n    port: 1883,\n})\n// highlight-next-line\nawait mqtt.publish("devs/log", "hello")\n')),(0,i.kt)("h3",{id:"deviceidentifier"},"deviceIdentifier"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"deviceIdentifier")," to uniquely identify the device\nin the topic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { deviceIdentifier } from "@devicescript/core"\nimport { startMQTTClient } from "@devicescript/net"\n\nconst mqtt = await startMQTTClient({\n    host: "broker.hivemq.com",\n    proto: "tcp",\n    port: 1883,\n})\n// highlight-next-line\nconst id = deviceIdentifier("self")\nawait mqtt.publish(`devs/log/${id}`, "hello")\n')),(0,i.kt)("h2",{id:"subscribe"},"subscribe"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe")," function creates a subscription for a topic route.\nThe function takes a an optional handler an returns an ",(0,i.kt)("a",{parentName:"p",href:"/developer/observables"},"observable"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { startMQTTClient } from "@devicescript/net"\nconst mqtt = await startMQTTClient({\n    host: "broker.hivemq.com",\n    proto: "tcp",\n    port: 1883,\n})\n\n// highlight-next-line\nawait mqtt.subscribe(`devs/log/#`, msg => {\n    console.log(msg.content.toString("utf-8"))\n})\n')),(0,i.kt)("h2",{id:"stop"},"stop"),(0,i.kt)("p",null,"The MQTT client will automatically retry to connect once it detects that connectivity is lost.\nTo close the current socket and stop the reconnect task, use ",(0,i.kt)("inlineCode",{parentName:"p"},"stop"),"."),(0,i.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,i.kt)("p",null,"The MQTT client is based on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rovale/micro-mqtt"},"micro-mqtt"),"."))}d.isMDXComponent=!0}}]);