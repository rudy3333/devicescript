"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6690],{35318:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(27378);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(t),f=o,g=u["".concat(l,".").concat(f)]||u[f]||s[f]||i;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},79e3:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(25773),o=(t(27378),t(35318));const i={title:"Board Configuration",sidebar_position:2.9},a="Board Configuration",c={unversionedId:"developer/board-configuration",id:"developer/board-configuration",title:"Board Configuration",description:"To target a specific hardware board or peripherical,",source:"@site/docs/developer/board-configuration.mdx",sourceDirName:"developer",slug:"/developer/board-configuration",permalink:"/devicescript/developer/board-configuration",draft:!1,tags:[],version:"current",sidebarPosition:2.9,frontMatter:{title:"Board Configuration",sidebar_position:2.9},sidebar:"tutorialSidebar",previous:{title:"Clients",permalink:"/devicescript/developer/clients"},next:{title:"Register",permalink:"/devicescript/developer/register"}},l={},d=[{value:"Available Boards",id:"available-boards",level:2},{value:"Configuration by Code",id:"configuration-by-code",level:2},{value:"I2C",id:"i2c",level:3},{value:"Configuration by file",id:"configuration-by-file",level:2}],p={toc:d},u="wrapper";function s(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"board-configuration"},"Board Configuration"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"To target a specific hardware board or peripherical,\nyou need to configure the pins, I2C, SPI, etc...")," This is done by loading the\nboard configuration package for your specific hardware."),(0,o.kt)("p",null,"The inserted board configuration exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"pins")," object that you can use to\nconfigure drivers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// highlight-next-line\nimport { pins } from "@dsboard/adafruit_qt_py_c3"\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In Visual Studio Code, on the file menu, click on the ",(0,o.kt)("strong",{parentName:"p"},"wand")," icon and select the board configuration.\nIf your board is already connectd, DeviceScript will automatically detect it and\nload the correct board configuration.")),(0,o.kt)("p",null,"Once the board configuration is imported, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"pins")," export to reference named pins from the board"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/adafruit_qt_py_c3"\nimport { startLightBulb } from "@devicescript/servers"\n\nconst lightBulb = startLightBulb({\n    // highlight-next-line\n    pin: pins.A0_D0,\n})\n')),(0,o.kt)("h2",{id:"available-boards"},"Available Boards"),(0,o.kt)("p",null,"You can find the list of supported devices and configuration in\nthe ",(0,o.kt)("a",{parentName:"p",href:"/devices"},"devices")," catalog."),(0,o.kt)("p",null,"If your board system-on-chip (SoC) is supported (ESP32, RP2040, ...) but the pin configuration\nis not yet available, you have 2 options: create a new board configuration file\nor configure the board by code."),(0,o.kt)("h2",{id:"configuration-by-code"},"Configuration by Code"),(0,o.kt)("p",null,"Some board configuration are generic and the I2C pins are not configured by default.\nFor example, the ",(0,o.kt)("a",{parentName:"p",href:"/devices/rp2040/pico-w"},"pico-w")," board configuration does not configure\nthe I2C pins and the code below configure them by code."),(0,o.kt)("p",null,"You can configure the board by code using the ",(0,o.kt)("inlineCode",{parentName:"p"},"configureHardware")," function."),(0,o.kt)("h3",{id:"i2c"},"I2C"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/pico_w"\n// highlight-next-line\nimport { configureHardware } from "@devicescript/servers"\n\n// highlight-start\nconfigureHardware({\n    i2c: {\n        pinSDA: pins.GP4,\n        pinSCL: pins.GP5,\n    },\n})\n// highlight-end\n')),(0,o.kt)("h2",{id:"configuration-by-file"},"Configuration by file"),(0,o.kt)("p",null,"This is a more advanced scenario where you want to fork an existing board configuration\nand publish configuration for a different board."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"/devices/add-board"},"Add board")," documentation to learn\nhow to create a new board configuration file."))}s.isMDXComponent=!0}}]);