"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7704],{35318:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var n=r(27378);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(r),d=i,b=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(b,s(s({ref:t},c),{},{components:r})):n.createElement(b,s({ref:t},c))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[m]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},23904:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=r(25773),i=(r(27378),r(35318));const o={sidebar_position:3.2,title:"Dimmer",hide_table_of_contents:!0},s="Dimmer",a={unversionedId:"samples/dimmer",id:"samples/dimmer",title:"Dimmer",description:"A potentiometer (slider or rotary) is used to control the brightness (intensity register)",source:"@site/docs/samples/dimmer.mdx",sourceDirName:"samples",slug:"/samples/dimmer",permalink:"/devicescript/samples/dimmer",draft:!1,tags:[],version:"current",sidebarPosition:3.2,frontMatter:{sidebar_position:3.2,title:"Dimmer",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Button LED",permalink:"/devicescript/samples/button-led"},next:{title:"Weather Display",permalink:"/devicescript/samples/weather-display"}},p={},l=[],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dimmer"},"Dimmer"),(0,i.kt)("p",null,"A potentiometer (slider or rotary) is used to control the brightness (intensity register)\nof a light bulb. This example uses a ",(0,i.kt)("a",{parentName:"p",href:"/devices/rp2040/pico"},"Raspberry Pi pico")," but could be redone using ",(0,i.kt)("a",{parentName:"p",href:"/devices"},"other devices"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/pico"\nimport { startLightBulb, startPotentiometer } from "@devicescript/servers"\n\n// starting a potentiometer driver on GP26\n// pinout https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html#pinout-and-design-files\nconst slider = startPotentiometer({\n    pin: pins.GP26,\n})\n// starting a dimmieable light on pin GP2\nconst led = startLightBulb({\n    pin: pins.GP7,\n    dimmable: true,\n})\n\n// subscribing to the slider readings and sending them to the intensity register\nslider.reading.subscribe(async level => {\n    await led.intensity.write(level)\n})\n')))}u.isMDXComponent=!0}}]);