"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8926],{35318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(27378);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(t),h=i,f=l["".concat(c,".").concat(h)]||l[h]||u[h]||o;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},29051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(25773),i=(t(27378),t(35318));const o={title:"Encrypted Fetch",sidebar_position:14.5},a="Encrypted Fetch",s={unversionedId:"developer/net/encrypted-fetch",id:"developer/net/encrypted-fetch",title:"Encrypted Fetch",description:"The @devicescript/net package contains encryptedFetch() function which lets you",source:"@site/docs/developer/net/encrypted-fetch.mdx",sourceDirName:"developer/net",slug:"/developer/net/encrypted-fetch",permalink:"/devicescript/developer/net/encrypted-fetch",draft:!1,tags:[],version:"current",sidebarPosition:14.5,frontMatter:{title:"Encrypted Fetch",sidebar_position:14.5},sidebar:"tutorialSidebar",previous:{title:"Network and Sockets",permalink:"/devicescript/developer/net/"},next:{title:"MQTT client",permalink:"/devicescript/developer/net/mqtt"}},c={},p=[{value:"Technical description",id:"technical-description",level:2},{value:"Security",id:"security",level:2}],d={toc:p},l="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"encrypted-fetch"},"Encrypted Fetch"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@devicescript/net")," package contains ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedFetch()")," function which lets you\nHTTP POST encrypted data and read encrypted responses.\nThe encryption uses ",(0,i.kt)("inlineCode",{parentName:"p"},"aes-256-ccm"),"."),(0,i.kt)("p",null,"Let's see how this works!"),(0,i.kt)("p",null,"First, set up a ",(0,i.kt)("inlineCode",{parentName:"p"},"main.ts")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { assert } from "@devicescript/core"\nimport { URL, encryptedFetch } from "@devicescript/net"\nimport { readSetting } from "@devicescript/settings"\n\nasync function sendReq(data: any) {\n    const url = new URL(await readSetting<string>("ENC_HTTP_URL"))\n    const password = url.hash.split("pass=")[1]\n    assert(\n        password !== "SecretPassword",\n        "Please change password in production!"\n    )\n    url.hash = ""\n    return await encryptedFetch({\n        data,\n        password,\n        url,\n    })\n}\nconsole.log(\n    await sendReq({\n        hello: "world",\n    })\n)\n')),(0,i.kt)("p",null,"Second, create a settings file with secrets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-env",metastring:'title="./.env.local"',title:'"./.env.local"'},'# Local settings and secrets\n# This file should **NOT** tracked by git\n# Make sure to put the value below in "..."; otherwise the # gets treated as comment\nENC_HTTP_URL="http://localhost:8080/api/devs-enc-fetch/mydevice#pass=SecretPassword"\n')),(0,i.kt)("p",null,"In production, you may want to use ",(0,i.kt)("inlineCode",{parentName:"p"},"deviceIdentifier('self')")," as the user name,\nprovided you handle that server-side."),(0,i.kt)("p",null,"On the server side, you can run the code below.\nFeel free to adopt to other languages or frameworks."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Two devices should never share a key.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import express from "express"\nimport bodyParser from "body-parser"\nimport * as crypto from "node:crypto"\nimport { config } from "dotenv"\n\nfunction getPasswordForDevice(deviceId: string): string | undefined {\n    // TODO look up device in database here!\n\n    config({ path: "./.env.local" })\n    const url = new URL(process.env["ENC_HTTP_URL"] + "")\n    if (url.pathname.replace(/.*\\//, "") == deviceId) {\n        const pass = url.hash.split("pass=")[1]\n        if (pass !== "SecretPassword") return pass\n    }\n\n    return undefined\n}\n\nconst TAG_BYTES = 8\nconst IV_BYTES = 13\nconst KEY_BYTES = 32\n\nfunction aesCcmEncrypt(key: Buffer, iv: Buffer, plaintext: Buffer) {\n    if (key.length != KEY_BYTES || iv.length != IV_BYTES)\n        throw new Error("Invalid key/iv")\n\n    const cipher = crypto.createCipheriv("aes-256-ccm", key, iv, {\n        authTagLength: TAG_BYTES,\n    })\n    const b0 = cipher.update(plaintext)\n    const b1 = cipher.final()\n    const tag = cipher.getAuthTag()\n    return Buffer.concat([b0, b1, tag])\n}\n\nfunction aesCcmDecrypt(key: Buffer, iv: Buffer, msg: Buffer) {\n    if (\n        key.length != KEY_BYTES ||\n        iv.length != IV_BYTES ||\n        !Buffer.isBuffer(msg)\n    )\n        throw new Error("invalid key, iv or msg")\n\n    if (msg.length < TAG_BYTES) return null\n\n    const decipher = crypto.createDecipheriv("aes-256-ccm", key, iv, {\n        authTagLength: TAG_BYTES,\n    })\n\n    decipher.setAuthTag(msg.slice(msg.length - TAG_BYTES))\n\n    const b0 = decipher.update(msg.slice(0, msg.length - TAG_BYTES))\n    try {\n        decipher.final()\n        return b0\n    } catch {\n        return null\n    }\n}\n\nconst app = express()\napp.post(\n    "/api/devs-enc-fetch/:deviceId",\n    bodyParser.raw({ type: "application/x-devs-enc-fetch" }),\n    (req, res) => {\n        const { deviceId } = req.params\n        const pass = getPasswordForDevice(deviceId)\n        if (!pass) {\n            console.log(`No device ${deviceId}`)\n            res.sendStatus(404)\n            return\n        }\n\n        console.log(`Device connected ${deviceId}`)\n\n        const iv = Buffer.alloc(13) // zero IV\n        const salt = req.headers["x-devs-enc-fetch-salt"] + ""\n        const key = Buffer.from(crypto.hkdfSync("sha256", pass, salt, "", 32))\n\n        const body = aesCcmDecrypt(key, iv, req.body as Buffer)\n        if (!body) {\n            console.log(`Can\'t decrypt`)\n            res.sendStatus(400)\n            return\n        }\n        const obj = JSON.parse(body.toString("utf-8"))\n        console.log("Request body:", obj)\n\n        const rid = obj.$rid\n\n        const respKeyInfo = crypto.randomBytes(15).toString("base64")\n        res.header("x-devs-enc-fetch-info", respKeyInfo)\n        const respKey = Buffer.from(\n            crypto.hkdfSync("sha256", pass, salt, respKeyInfo, 32)\n        )\n\n        // TODO check for duplicate rid!\n\n        const resp = {\n            $rid: rid,\n            response: "Got it!",\n        }\n\n        const rbody = aesCcmEncrypt(\n            respKey,\n            iv,\n            Buffer.from(JSON.stringify(resp), "utf8")\n        )\n        res.end(rbody)\n    }\n)\n\napp.listen(8080)\n')),(0,i.kt)("h2",{id:"technical-description"},"Technical description"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedFetch()")," function performs as HTTP request which uses ",(0,i.kt)("inlineCode",{parentName:"p"},"content-type")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"application/x-devs-enc-fetch"),"\nand two special headers.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"x-devs-enc-fetch-algo")," header contains information about the request encryption algorithm\nand can be safely ignored.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"x-devs-enc-fetch-salt")," contain a string salt value for HMAC key derivation function (HKDF) from RFC 5869."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedFetch()")," function also requires a password, which should be long-ish\nrandom string (with about 256-bits of entropy).\nThe key for AES encryption is derived using HKDF based on the password and previously\ngenerated salt; the ",(0,i.kt)("inlineCode",{parentName:"p"},"info")," parameter is set to ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),".\nThis key is used for both encryption and authentication of the request."),(0,i.kt)("p",null,"The body of the request is a JSON object.\nBefore sending it out, ",(0,i.kt)("inlineCode",{parentName:"p"},"encryptedFetch()")," extends it with a random request identifier (stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"$rid")," property).\nThe JSON object is converted to a buffer and\nencrypted using AES-256-CCM and an 8-byte authentication tag is appended.\nThe initialization vector (IV) is all-zero."),(0,i.kt)("p",null,"This is send to the server, which decrypts the request accordingly."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If applicable, the server should check if a request with a given ",(0,i.kt)("inlineCode",{parentName:"p"},"$rid")," was already handled,\nand if so, reject it.\nOtherwise, someone can replay a client request.")),(0,i.kt)("p",null,"If the server responds with with ",(0,i.kt)("inlineCode",{parentName:"p"},"2xx")," code, the response is assumed to be\na JSON object encrypted using a key derived using HKDF from the password,\nthe previously generated salt, and ",(0,i.kt)("inlineCode",{parentName:"p"},"info")," parameter set to the value\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"x-devs-enc-fetch-info")," in the response.\nIV is all zero.\nThe response also has the 8-byte authentication tag."),(0,i.kt)("p",null,"If the response is not ",(0,i.kt)("inlineCode",{parentName:"p"},"2xx")," or if it cannot be authenticated an exception is thrown.\nOtherwise, the JSON object of the response is returned."),(0,i.kt)("h2",{id:"security"},"Security"),(0,i.kt)("p",null,"From the device standpoint, if the salt is unique, the device can be sure\nonly someone with the password can read the request or generate a response.\nResponse cannot be replayed, since the key for it incorporates the salt."),(0,i.kt)("p",null,"From the server standpoint, a man-in-the-middle attacker can intercept\na device request and either delay it or send it again at later time.\nThus, server should check for uniqueness of the ",(0,i.kt)("inlineCode",{parentName:"p"},"$rid")," if this can be a problem.\nThe attacker will not be able to deduce anything about the contents of the response\neven if the server doesn't ignore a duplicate request, since the ",(0,i.kt)("inlineCode",{parentName:"p"},"info")," parameter\nsend from server is incorporated in the response key and it is random."))}u.isMDXComponent=!0}}]);