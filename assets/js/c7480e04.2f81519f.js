"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2357],{35318:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var r=n(27378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),y=o,b=d["".concat(c,".").concat(y)]||d[y]||u[y]||a;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},50357:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(25773),o=(n(27378),n(35318));const a={sidebar_position:4,description:"Create a copy-paste micro-keyboard on Raspberry Pi Pico using a single button, HID keyboard server, and a status LED.",keywords:["Raspberry Pi Pico","copy-paste","micro-keyboard","HID keyboard","status LED"],hide_table_of_contents:!0},i="Copy Paste Button",s={unversionedId:"samples/copy-paste-button",id:"samples/copy-paste-button",title:"Copy Paste Button",description:"Create a copy-paste micro-keyboard on Raspberry Pi Pico using a single button, HID keyboard server, and a status LED.",source:"@site/docs/samples/copy-paste-button.mdx",sourceDirName:"samples",slug:"/samples/copy-paste-button",permalink:"/devicescript/samples/copy-paste-button",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Create a copy-paste micro-keyboard on Raspberry Pi Pico using a single button, HID keyboard server, and a status LED.",keywords:["Raspberry Pi Pico","copy-paste","micro-keyboard","HID keyboard","status LED"],hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Weather Dashboard",permalink:"/devicescript/samples/weather-dashboard"},next:{title:"Thermostat",permalink:"/devicescript/samples/thermostat"}},c={},p=[],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"copy-paste-button"},"Copy Paste Button"),(0,o.kt)("p",null,"In this example, we use a single button to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"copy-paste")," micro-keyboard\non ",(0,o.kt)("a",{parentName:"p",href:"/devices/rp2040"},"Raspberry Pi Pico"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The button is connected to the Pico's GP14 pin. When the button is pressed, the Pico will send a ",(0,o.kt)("inlineCode",{parentName:"li"},"ctrl+c")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"ctrl+v")," keystroke to the computer using a ",(0,o.kt)("a",{parentName:"li",href:"/api/drivers/hidkeyboard"},"HID keyboard")," server.\nThe ",(0,o.kt)("inlineCode",{parentName:"li"},"ctrl+c")," keystroke will copy the selected text, and the ",(0,o.kt)("inlineCode",{parentName:"li"},"ctrl+v")," keystroke will paste the copied text."),(0,o.kt)("li",{parentName:"ul"},"The status of the clipboard is indicated by a status LED connected to the Pico's GP1 pin. When the LED is on, the clipboard is full, and when the LED is off, the clipboard is empty.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"On MacOS, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"LeftGUI"),". To update for Windows, replace ",(0,o.kt)("inlineCode",{parentName:"p"},"LeftGuid")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"LeftControl"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins, board } from "@dsboard/pico"\nimport {\n    startButton,\n    startHidKeyboard,\n    startLightBulb,\n} from "@devicescript/servers"\nimport {\n    HidKeyboardAction,\n    HidKeyboardModifiers,\n    HidKeyboardSelector,\n} from "@devicescript/core"\n\n// the keyboard button mounted on GP14\nconst button = startButton({\n    pin: pins.GP14,\n})\n// a status indicator led mounted on GP1\nconst led = startLightBulb({\n    pin: pins.GP1,\n})\n// the HID keyboard driver that will send keystrokes\nconst keyboard = startHidKeyboard({})\n\n// true: ctrl+c, false: ctrl+v\nlet copy = true\n// use leftgui on mac or leftcontrol on windows\nlet modifier = HidKeyboardModifiers.LeftGUI\n// uncomment for windows\n// let modifier = HidKeyboardModifiers.LeftControl\n\n// copy and paste on button click\nbutton.down.subscribe(async () => {\n    // when copy is true, send ctrl+c\n    const selector = copy ? HidKeyboardSelector.C : HidKeyboardSelector.V\n    // when copy is true, turn on the led to represent a "full clipboard"\n    const brightness = copy ? 1 : 0\n\n    // a bit of logging\n    console.log(copy ? "ctrl+c" : "ctrl+v")\n    await keyboard.key(selector, modifier, HidKeyboardAction.Press)\n    await led.intensity.write(brightness)\n    // toggle for next round\n    copy = !copy\n})\n')))}u.isMDXComponent=!0}}]);