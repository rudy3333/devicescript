"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1327],{35318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var i=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,v=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return n?i.createElement(v,o(o({ref:t},d),{},{components:n})):i.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83726:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(25773),r=(n(27378),n(35318));const a={sidebar_position:21,description:"Learn how to simulate DeviceScript devices using the web dashboard and Node.js project. Start by configuring your project for simulation and use Visual Studio Code to debug your DeviceScript code and the simulator in the same session."},o="Simulation",s={unversionedId:"developer/simulation",id:"developer/simulation",title:"Simulation",description:"Learn how to simulate DeviceScript devices using the web dashboard and Node.js project. Start by configuring your project for simulation and use Visual Studio Code to debug your DeviceScript code and the simulator in the same session.",source:"@site/docs/developer/simulation.mdx",sourceDirName:"developer",slug:"/developer/simulation",permalink:"/devicescript/developer/simulation",draft:!1,tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21,description:"Learn how to simulate DeviceScript devices using the web dashboard and Node.js project. Start by configuring your project for simulation and use Visual Studio Code to debug your DeviceScript code and the simulator in the same session."},sidebar:"tutorialSidebar",previous:{title:"Bundled firmware",permalink:"/devicescript/developer/bundle"},next:{title:"IoT",permalink:"/devicescript/developer/iot/"}},l={},c=[{value:"Simulated DeviceScript Device",id:"simulated-devicescript-device",level:2},{value:"Dashboard",id:"dashboard",level:2},{value:"Node.JS simulation",id:"nodejs-simulation",level:2},{value:"Running using package scripts",id:"running-using-package-scripts",level:3},{value:"build",id:"build",level:4},{value:"watch",id:"watch",level:4},{value:"Debugging DeviceScript and Node",id:"debugging-devicescript-and-node",level:3},{value:"<code>aurascope</code> example",id:"aurascope-example",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simulation"},"Simulation"),(0,r.kt)("p",null,"DeviceScript supports simulation through a web dashboard and a Node.JS project running in parallel on the developer machine."),(0,r.kt)("h2",{id:"simulated-devicescript-device"},"Simulated DeviceScript Device"),(0,r.kt)("p",null,"DeviceScript will start a simulated programmable microcontroller on demand. You can also start it from the connect dialog.\nIt runs a ",(0,r.kt)("a",{parentName:"p",href:"/api/vm"},"WASM-ed build of the C runtime"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"A screenshot of starting the DeviceScript simulator",src:n(42706).Z,width:"1055",height:"314"})),(0,r.kt)("h2",{id:"dashboard"},"Dashboard"),(0,r.kt)("p",null,"The simulators dashboard is the most convenient way to start simulating services and testing out your code."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the DeviceScript view in Visual Studio Code"),(0,r.kt)("li",{parentName:"ul"},"Click on the ",(0,r.kt)("strong",{parentName:"li"},"dashboard")," icon in the ",(0,r.kt)("strong",{parentName:"li"},"Devices")," menu")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"A screenshot of the simulator view",src:n(96977).Z,width:"969",height:"566"})),(0,r.kt)("h2",{id:"nodejs-simulation"},"Node.JS simulation"),(0,r.kt)("p",null,"For advanced simulation scenario, you can use Node.JS and the ",(0,r.kt)("a",{parentName:"p",href:"https://microsoft.github.io/jacdac-docs/clients/javascript/"},"TypeScript client library")," and,\nany other Node package (like your favorite test project), to generate complex scenarios."),(0,r.kt)("p",null,"Start by configuring your project for simulation by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"devs add sim\n")),(0,r.kt)("p",null,"or in Visual Studio Code, using the ",(0,r.kt)("strong",{parentName:"p"},"DeviceScript: Add Sim...")," in the command palette."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all ",(0,r.kt)("inlineCode",{parentName:"li"},".ts")," files, expect for the ",(0,r.kt)("inlineCode",{parentName:"li"},"./sim/")," folder, are compiled into DeviceScript bytecode"),(0,r.kt)("li",{parentName:"ul"},"all file under ",(0,r.kt)("inlineCode",{parentName:"li"},"./sim/")," are compiled as a Node.JS application")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".devicescript/*  libraries and supporting files\nsrc/main.ts          DeviceScript entry point\n...\nsim/app.ts       Node entry point for the simulator\nsim/...\n")),(0,r.kt)("h3",{id:"running-using-package-scripts"},"Running using package scripts"),(0,r.kt)("p",null,"The scripts in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," are configured support both DeviceScript and sim ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"watch"),"."),(0,r.kt)("h4",{id:"build"},"build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# build DeviceScript and node.js sim\nyarn build\n\n# build device script only\nyarn build:devicescript\n\n# build node.js sim only\nyarn build:sim\n")),(0,r.kt)("h4",{id:"watch"},"watch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# watch DeviceScript and node.js sim\nyarn watch\n\n# watch device script only\nyarn watch:devicescript\n\n# watch node.js sim only\nyarn watch:sim\n")),(0,r.kt)("h3",{id:"debugging-devicescript-and-node"},"Debugging DeviceScript and Node"),(0,r.kt)("p",null,"Visual Studio Code supports ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/debugging#_launch-configurations"},"multiple debugging sessions simultaneously")," so it is possible to debug your DeviceScript\ncode and the simulator in the same session."),(0,r.kt)("mermaid",{value:"stateDiagram-v2\n    code: VS Code\n    node: app.ts (node.js)\n    devicescript: main.ts (devicescript)\n    devtools: Developer Tools\n    device: Simulator or Hardware device\n    code --\x3e devicescript: DeviceScript debugger\n    code --\x3e node: Node.JS debugger\n    devicescript --\x3e devtools\n    node --\x3e devtools: web socket connection\n    devtools --\x3e device"}),(0,r.kt)("h3",{id:"aurascope-example"},(0,r.kt)("inlineCode",{parentName:"h3"},"aurascope")," example"),(0,r.kt)("p",null,"This simulator sample starts a simulated ",(0,r.kt)("inlineCode",{parentName:"p"},"psychomagnotheric energy sensor")," (custom service) using ",(0,r.kt)("inlineCode",{parentName:"p"},"jacdac-ts"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./sim/app.ts"',title:'"./sim/app.ts"'},'// Jacdac bus that will connect to the devtools server\nimport { bus } from "./runtime"\n// Jacdac helper to simulate services\nimport { addServer, AnalogSensorServer } from "jacdac-ts"\n// custom service\nimport { SRV_PSYCHOMAGNOTHERIC_ENERGY } from "../.devicescript/ts/constants"\n\n// server for the custom service\nconst server = new AnalogSensorServer(SRV_PSYCHOMAGNOTHERIC_ENERGY, {\n    readingValues: [0.5],\n    readingError: [0.1],\n    streamingInterval: 500,\n})\n// change level randomly\nsetInterval(() => {\n    // randomly change the\n    const newValue = server.reading.values()[0] + (0.5 - Math.random()) / 10\n    server.reading.setValues([newValue])\n    console.debug(`psycho value: ${newValue}`)\n}, 100)\naddServer(bus, "aurascope", server)\n')))}p.isMDXComponent=!0},42706:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/simulator-ff4f3f7cd39d9aa7e683dfa47f6aa724.png"},96977:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/simulators-2104f8902e1a20aa2a3e224ab86e7770.png"}}]);