"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9294],{35318:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>g});var n=t(27378);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),l=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(o.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,g=u["".concat(o,".").concat(f)]||u[f]||d[f]||a;return t?n.createElement(g,c(c({ref:r},p),{},{components:t})):n.createElement(g,c({ref:r},p))}));function g(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,c=new Array(a);c[0]=f;var s={};for(var o in r)hasOwnProperty.call(r,o)&&(s[o]=r[o]);s.originalType=e,s[u]="string"==typeof e?e:i,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},74180:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=t(25773),i=(t(27378),t(35318));const a={pagination_prev:null,pagination_next:null,description:"DeviceScript client for I2C service"},c="I2C",s={unversionedId:"api/clients/i2c",id:"api/clients/i2c",title:"I2C",description:"DeviceScript client for I2C service",source:"@site/docs/api/clients/i2c.md",sourceDirName:"api/clients",slug:"/api/clients/i2c",permalink:"/devicescript/api/clients/i2c",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for I2C service"},sidebar:"tutorialSidebar"},o={},l=[{value:"Usage",id:"usage",level:2},{value:"Read-write register byte",id:"read-write-register-byte",level:3},{value:"Read-write register buffer",id:"read-write-register-buffer",level:3},{value:"Read-write raw buffer",id:"read-write-raw-buffer",level:3},{value:"Errors",id:"errors",level:3}],p={toc:l},u="wrapper";function d(e){let{components:r,...t}=e;return(0,i.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"i2c"},"I2C"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/jacdac-docs/services/i2c/"},"I2C service")," is used internally by the\n",(0,i.kt)("a",{parentName:"p",href:"/developer/packages"},(0,i.kt)("inlineCode",{parentName:"a"},"@devicescript/i2c"))," package."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"read-write-register-byte"},"Read-write register byte"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { i2c } from "@devicescript/i2c"\n\nconst address = 0x..\nconst register = 0x..\nconst value = 0x..\n\n// highlight-next-line\nawait i2c.writeReg(address, register, value)\n\n// highlight-next-line\nconst readValue = await i2c.readReg(address, register)\n')),(0,i.kt)("h3",{id:"read-write-register-buffer"},"Read-write register buffer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { i2c } from "@devicescript/i2c"\n\nconst address = 0x..\nconst register = 0x..\nconst size = 0x..\n\n// highlight-next-line\nawait i2c.writeRegBuf(address, register, hex`...`)\n\n// highlight-next-line\nconst readBuf = await i2c.readRegBuf(address, register, size)\n')),(0,i.kt)("h3",{id:"read-write-raw-buffer"},"Read-write raw buffer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { i2c } from "@devicescript/i2c"\n\nconst address = 0x..\nconst size = 0x..\n\n// highlight-next-line\nawait i2c.writeBuf(address, hex`...`)\n\n// highlight-next-line\nconst readBuf = await i2c.readBuf(address, size)\n')),(0,i.kt)("h3",{id:"errors"},"Errors"),(0,i.kt)("p",null,"I2C functions may throw a ",(0,i.kt)("inlineCode",{parentName:"p"},"I2CError"),"\nerror if the operation fails."))}d.isMDXComponent=!0}}]);