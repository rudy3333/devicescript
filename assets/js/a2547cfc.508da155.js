"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2277],{35318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(25773),i=(n(27378),n(35318));const a={title:"Blynk.io",sidebar_position:5.5},o="Blynk.io",l={unversionedId:"developer/iot/blynk-io/index",id:"developer/iot/blynk-io/index",title:"Blynk.io",description:"Blynk.io provides an IoT dashboard for devices with virtual pins.",source:"@site/docs/developer/iot/blynk-io/index.mdx",sourceDirName:"developer/iot/blynk-io",slug:"/developer/iot/blynk-io/",permalink:"/devicescript/developer/iot/blynk-io/",draft:!1,tags:[],version:"current",sidebarPosition:5.5,frontMatter:{title:"Blynk.io",sidebar_position:5.5},sidebar:"tutorialSidebar",previous:{title:"Blues.io Notecard",permalink:"/devicescript/developer/iot/blues-io/"},next:{title:"Matlab ThingSpeak",permalink:"/devicescript/developer/iot/matlab-thingspeak/"}},p={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Uploading data",id:"uploading-data",level:2}],s={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"blynkio"},"Blynk.io"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://blynk.io"},"Blynk.io")," provides an IoT dashboard for devices with virtual pins."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pelikhan/devicescript-blynk"},"pelikhan/devicescript-blynk"),"\npackage uses the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.blynk.io/en/blynk.cloud/https-api-overview"},"HTTPS REST API"),"\nto send data from devices."),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a new DeviceScript project"),(0,i.kt)("li",{parentName:"ul"},"Add the library to your DeviceScript project:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save pelikhan/devicescript-blynk\n")),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/developer/settings"},"Add device settings")," to your project"),(0,i.kt)("li",{parentName:"ul"},"Add the device authentication token to your settings")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# .env.local\nBLYNK_TOKEN=your-token\n")),(0,i.kt)("h2",{id:"uploading-data"},"Uploading data"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"updateDatastream")," to update multiple virtual pins at once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Temperature, Humidity } from "@devicescript/core"\nimport { delay, millis } from "@devicescript/core"\n// highlight-next-line\nimport { updateDatastream } from "devicescript-blynk"\n\n// connect sensors\nconst temperature = new Temperature()\nconst humidity = new Humidity()\n\nwhile (true) {\n    // read sensor values\n    const t = await temperature.reading.read()\n    const h = await humidity.reading.read()\n\n    // highlight-start\n    // send blynk.io data\n    await updateDatastream({\n        v1: t,\n        v2: h,\n    })\n    // highlight-end\n\n    // take a break\n    await delay(10000)\n}\n')))}u.isMDXComponent=!0}}]);