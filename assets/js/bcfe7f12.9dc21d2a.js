"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5250],{35318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(27378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},55854:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(25773),a=(r(27378),r(35318));const o={sidebar_position:9,description:"Learn how to use buffers for dynamic allocation, memory conservation, and creating arrays with fixed upper limits.",keywords:["buffers","markdown","dynamic allocation","memory conservation","arrays"]},i="Buffers",s={unversionedId:"api/core/buffers",id:"api/core/buffers",title:"Buffers",description:"Learn how to use buffers for dynamic allocation, memory conservation, and creating arrays with fixed upper limits.",source:"@site/docs/api/core/buffers.md",sourceDirName:"api/core",slug:"/api/core/buffers",permalink:"/devicescript/api/core/buffers",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,description:"Learn how to use buffers for dynamic allocation, memory conservation, and creating arrays with fixed upper limits.",keywords:["buffers","markdown","dynamic allocation","memory conservation","arrays"]},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/devicescript/api/core/commands"},next:{title:"Clients",permalink:"/devicescript/api/clients/"}},c={},l=[{value:"hex",id:"hex",level:2},{value:"packet",id:"packet",level:2}],p={toc:l},u="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"buffers"},"Buffers"),(0,a.kt)("p",null,"Buffers can be dynamically allocated, read and written.\nThis can be used to conserve memory (regular variables always take 8 bytes)\nand create arrays (with fixed upper limit)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const mybuf = Buffer.alloc(12) // 12 byte buffer\nmybuf.setAt(10, "u16", 123)\nmybuf.setAt(3, "u22.10", 173.282)\nconst z = mybuf.getAt(3, "u22.10")\n')),(0,a.kt)("h2",{id:"hex"},"hex"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hex")," is a string literal template that converts data in hexadecimal form into a readonly ",(0,a.kt)("inlineCode",{parentName:"p"},"Buffer")," in flash."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Buffer in flash!\nconst data = hex`010203040506070809`\nconsole.log(data)\n")),(0,a.kt)("p",null,"Comments and whitespace are allowed in ",(0,a.kt)("inlineCode",{parentName:"p"},"hex")," literals:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const commentedData = hex`\n01 02 03 // first three numbers\nff aa    // two more bytes\n`\n")),(0,a.kt)("h2",{id:"packet"},"packet"),(0,a.kt)("p",null,"There is a special buffer called ",(0,a.kt)("inlineCode",{parentName:"p"},"ds.packet")," which represents a buffer to be passed to next\ncommand or register write.\nIt supports ",(0,a.kt)("inlineCode",{parentName:"p"},"ds.packet.setLength()")," function (unlike regular buffers),\nand can be passed to any command or register write.\nFor example ",(0,a.kt)("inlineCode",{parentName:"p"},"lamp.intensity.write(0.7)")," is equivalent to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'const lamp = new ds.Led()\nds.packet.setLength(2)\nds.packet.setAt(0, "u0.16", 0.7)\nlamp.intensity.write(ds.packet)\n')))}f.isMDXComponent=!0}}]);