"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6060],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(g,i(i({ref:t},c),{},{components:n})):o.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(25773),r=(n(27378),n(35318));const a={sidebar_position:1,description:"Learn how to use console functionality in DeviceScript to add logging to your script and how to use format strings to write registers.",keywords:["DeviceScript","console","logging","format strings","registers"]},i="Console output",s={unversionedId:"developer/console",id:"developer/console",title:"Console output",description:"Learn how to use console functionality in DeviceScript to add logging to your script and how to use format strings to write registers.",source:"@site/docs/developer/console.mdx",sourceDirName:"developer",slug:"/developer/console",permalink:"/devicescript/developer/console",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Learn how to use console functionality in DeviceScript to add logging to your script and how to use format strings to write registers.",keywords:["DeviceScript","console","logging","format strings","registers"]},sidebar:"tutorialSidebar",previous:{title:"Developer",permalink:"/devicescript/developer/"},next:{title:"Status Light",permalink:"/devicescript/developer/status-light"}},l={},p=[{value:"Console data",id:"console-data",level:2},{value:"Format strings",id:"format-strings",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"console-output"},"Console output"),(0,r.kt)("p",null,"DeviceScript supports basic ",(0,r.kt)("inlineCode",{parentName:"p"},"console")," functionality which allows you to add logging to your script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'console.debug("debug")\nconsole.log("log")\nconsole.warn("warn")\nconsole.error("error")\n')),(0,r.kt)("p",null,"The console output will be visible in the DeviceScript terminal window."),(0,r.kt)("h2",{id:"console-data"},"Console data"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"console.data")," is a special purpose function to log sensor data. A timestamp (",(0,r.kt)("inlineCode",{parentName:"p"},"ds.millis()"),") is automatically added by the runtime."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const temp = 20\nconst humi = 60\n\nconsole.data({ temp, humi })\n")),(0,r.kt)("p",null,"In Visual Studio Code, you will find the data in the ",(0,r.kt)("strong",{parentName:"p"},"DeviceScript - Data"),"\noutput pane or you can download it from the view menu."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"console data icon",src:n(13682).Z,width:"372",height:"355"})),(0,r.kt)("p",null,"The following Visual Studio Code extensions are recommended for a best experience:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter"},"Jupyter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers"},"Jupyter Renderers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-python.python"},"Python")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"},"PyLance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv"},"Raibow CSV"))),(0,r.kt)("h2",{id:"format-strings"},"Format strings"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log()")," takes zero or more arguments of any type.\nTemplate literals and string concatenation are also supported.\nCompiler internally constructs a format string (see below)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let x = 0\nlet y = 4\nconsole.log("Hello world")\nconsole.log("X is", x, "and Y is", y)\nconsole.log("X=", x, "Y=", y)\nconsole.log(`X=${x} Y=${y}`)\nconsole.log("X=" + x + " Y=" + y)\n')),(0,r.kt)("p",null,"The compiler is smart about adding spaces (the second and third examples will print ",(0,r.kt)("inlineCode",{parentName:"p"},"X is 7 and Y is 12"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"X=7 Y=12")," respectively)."),(0,r.kt)("p",null,"Concatenation and template literals can be also used to write registers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'const screen = new ds.CharacterScreen()\nlet x = 7\nscreen.message.write("X = " + x)\nscreen.message.write(`X is ${x}`)\n')),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ds.format()")," function directly, either with ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log()")," or\nwhen setting string registers.\nArguments are ",(0,r.kt)("inlineCode",{parentName:"p"},"{0}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{1}"),", ..., ",(0,r.kt)("inlineCode",{parentName:"p"},"{9}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{A}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{B}"),", ..., ",(0,r.kt)("inlineCode",{parentName:"p"},"{F}"),".\nA second digit can be supplied to specify precision (though this doesn't work so well yet):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'const screen = new ds.CharacterScreen()\nlet x = 7,\n    y = 12\n\nconsole.log(ds.format("X is {0} and Y is {1}", x, y))\nconsole.log(ds.format("X = {04}", x))\nscreen.message.write(ds.format("X is {0}", x))\n')))}m.isMDXComponent=!0},13682:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/consoledata-82fce9648a2c3463633acc673722b334.png"}}]);