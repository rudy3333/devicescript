"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[320],{35318:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(27378);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=i,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(h,o(o({ref:t},l),{},{components:r})):n.createElement(h,o({ref:t},l))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},26763:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(25773),i=(r(27378),r(35318));const a={sidebar_position:11,title:"Add SoC/MCU"},o="Adding a System-on-a-Chip or Microcontroller",s={unversionedId:"devices/add-soc",id:"devices/add-soc",title:"Add SoC/MCU",description:"DeviceScript currently supports the following:",source:"@site/docs/devices/add-soc.mdx",sourceDirName:"devices",slug:"/devices/add-soc",permalink:"/devicescript/devices/add-soc",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Add SoC/MCU"},sidebar:"tutorialSidebar",previous:{title:"Add Board",permalink:"/devicescript/devices/add-board"},next:{title:"Add Shield",permalink:"/devicescript/devices/add-shield"}},c={},p=[{value:"Creating new SoC",id:"creating-new-soc",level:2}],l={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-a-system-on-a-chip-or-microcontroller"},"Adding a System-on-a-Chip or Microcontroller"),(0,i.kt)("p",null,"DeviceScript currently supports the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/devicescript-esp32"},"ESP32"),', including the "classic", S2, S3, and C3 variants'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/devicescript-pico"},"RP2040"),", including Raspberry Pi Pico and Pico W"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/devicescript/tree/main/runtime/posix"},"WASM and POSIX")," for simulation")),(0,i.kt)("p",null,"Following are work-in-progress:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/microsoft/devicescript-stm32"},"STM32"),", specifically STM32L475VG")),(0,i.kt)("p",null,"If you're working on a port, let us know (via\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/issues"},"GitHub issue")," or\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/discussions"},"discussion"),") so we can list is here."),(0,i.kt)("p",null,'Generally, DeviceScript has a concept of an "architecture" which corresponds 1:1 to an executable binary,\nwhich is a specific SoC/MCU or a family thereof\n(we use SoC (System-on-a-Chip) and MCU (Microcontroller Unit) interchangably in this document).'),(0,i.kt)("p",null,"For example, for ESP32 there are ",(0,i.kt)("inlineCode",{parentName:"p"},"esp32"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"esp32c3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"esp32s2"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"esp32s3")," architectures.\nFor RP2040, we have two architectures: ",(0,i.kt)("inlineCode",{parentName:"p"},"rp2040")," (generic) and ",(0,i.kt)("inlineCode",{parentName:"p"},"rp2040w")," (with support for WiFi chip from Pico W).\nFor STM32, it may be possible in future to have say a single ",(0,i.kt)("inlineCode",{parentName:"p"},"stm32l4")," architecture that then dynamically adds enables support\nfor peripherals that are present and auto-detects the size of RAM and FLASH,\nbut right now we just have a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"stm32l475vg"),"."),(0,i.kt)("p",null,"DeviceScript further ",(0,i.kt)("a",{parentName:"p",href:"/devices/add-board"},'defines "boards"')," which take a binary architecture image and binary-edit it to include\nconfiguration data about pin names and on-board peripherals."),(0,i.kt)("p",null,'Note, that there isn\'t any shared code for say "ARM" or "RISC-V" architecture, as all the VM code is platform-agnostic C anyways,\nwhich sits in the main ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/tree/main/runtime/devicescript"},"DeviceScript repo"),"."),(0,i.kt)("h2",{id:"creating-new-soc"},"Creating new SoC"),(0,i.kt)("p",null,"It's best to start by forking an existing port, we suggest the ",(0,i.kt)("inlineCode",{parentName:"p"},"rp2040")," one, and implement functions one by one.\nStart by looking at ",(0,i.kt)("inlineCode",{parentName:"p"},"jd_user_config.h")," file and disable things."),(0,i.kt)("p",null,"Note that the STM32 port borrows heavily from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/jacdac-msr-modules"},"Jacdac firmware for STM32G0-based modules"),",\nso parts of the source are not necessary for DeviceScript.\nIf you want to use STM32 as a base, it's likely better to use ",(0,i.kt)("inlineCode",{parentName:"p"},"rp2040")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"esp32")," as the skeleton,\nand copy code from the STM32 as needed."),(0,i.kt)("p",null,"As for SoC requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"make sure your SoC ",(0,i.kt)("a",{parentName:"li",href:"/language/runtime#memory"},"has enough memory")),(0,i.kt)("li",{parentName:"ul"},"it's highly recommended to use SoCs with built-in USB peripheral; we do have some support for using external USB-UART chips (as in ESP32 classic port) but it's rather buggy")))}u.isMDXComponent=!0}}]);