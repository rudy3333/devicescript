"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5272],{35318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(25773),a=(n(27378),n(35318));const i={sidebar_position:4.1,description:"Temperature logging to Adafruit.io using QT Py and SHCT3",hide_table_of_contents:!0},o="Temperature + MQTT",s={unversionedId:"samples/temperature-mqtt",id:"samples/temperature-mqtt",title:"Temperature + MQTT",description:"Temperature logging to Adafruit.io using QT Py and SHCT3",source:"@site/docs/samples/temperature-mqtt.mdx",sourceDirName:"samples",slug:"/samples/temperature-mqtt",permalink:"/devicescript/samples/temperature-mqtt",draft:!1,tags:[],version:"current",sidebarPosition:4.1,frontMatter:{sidebar_position:4.1,description:"Temperature logging to Adafruit.io using QT Py and SHCT3",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"GitHub Build Status",permalink:"/devicescript/samples/github-build-status"},next:{title:"Homebridge + Humidity Sensor",permalink:"/devicescript/samples/homebridge-humidity"}},p={},l=[{value:"Reading temperature",id:"reading-temperature",level:2},{value:"Configuration and Secrets",id:"configuration-and-secrets",level:2},{value:"Starting the MQTT client",id:"starting-the-mqtt-client",level:2},{value:"Publish data",id:"publish-data",level:2},{value:"All together",id:"all-together",level:2},{value:"Extra points: Filtering data",id:"extra-points-filtering-data",level:2}],d={toc:l},u="wrapper";function c(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"temperature--mqtt"},"Temperature + MQTT"),(0,a.kt)("p",null,"This sample uses an ESP32-C3 board ",(0,a.kt)("a",{parentName:"p",href:"/devices/esp32/adafruit-qt-py-c3"},"Adafruit QT Py C3"),"\nand a ",(0,a.kt)("a",{parentName:"p",href:"https://www.adafruit.com/product/4636"},"SHTC3 sensor")," to publish a temperature reading to\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://io.adafruit.com/api/docs/"},"Adafruit.io MQTT APIs")," every minute."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"A photograph of the Adafruit QT Py and SHTC3 breakout",src:n(988).Z,width:"1024",height:"576"})),(0,a.kt)("h2",{id:"reading-temperature"},"Reading temperature"),(0,a.kt)("p",null,"We start by configuring the script for the QT Py and adding a scheduled interval to read the temperature\nfrom the SHTC3 sensor every 60 seconds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// hardware configuration and drivers\nimport "@dsboard/adafruit_qt_py_c3"\nimport { startSHTC3 } from "@devicescript/drivers"\nimport { schedule } from "@devicescript/runtime"\n\n// mounting a temperature server for the SHTC3 sensor\nconst { temperature } = await startSHTC3()\n\nschedule(\n    async () => {\n        // read data from temperature sensor\n        const value = await temperature.reading.read()\n    },\n    { timeout: 1000, interval: 60000 }\n)\n')),(0,a.kt)("h2",{id:"configuration-and-secrets"},"Configuration and Secrets"),(0,a.kt)("p",null,"To connect to Adafruit.io, you will to get an account with ",(0,a.kt)("a",{parentName:"p",href:"https://io.adafruit.com"},"https://io.adafruit.com"),"\nand store your username and password in the ",(0,a.kt)("a",{parentName:"p",href:"/developer/settings"},"settings"),"\nas the ",(0,a.kt)("inlineCode",{parentName:"p"},"IO_USERNAME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"IO_KEY")," keys (make sure your key is in ",(0,a.kt)("inlineCode",{parentName:"p"},"env.local"),").\nAlso create a feed and update the feed key in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// highlight-next-line\nimport { readSetting } from "@devicescript/settings"\n\n// TODO: update feed key\nconst feed = "temperature"\n// highlight-next-line\nconst username = await readSetting("IO_USERNAME")\n// this secret is stored in the .env.local and uploaded to the device settings\n// highlight-next-line\nconst password = await readSetting("IO_KEY")\n')),(0,a.kt)("h2",{id:"starting-the-mqtt-client"},"Starting the MQTT client"),(0,a.kt)("p",null,"Following the ",(0,a.kt)("a",{parentName:"p",href:"https://io.adafruit.com/api/docs/mqtt.html#feed-topic-format"},"Adafruit documentation"),",\nwe start a MQTT connection and craft a topic that will route the data to our account."),(0,a.kt)("p",null,"In the "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'// highlight-next-line\nimport { startMQTTClient } from "@devicescript/net"\n\n...\n\n// highlight-start\nconst mqtt = await startMQTTClient({\n    host: `io.adafruit.com`,\n    proto: "tls",\n    port: 8883,\n    username,\n    password,\n})\nconst topic = `${username}/feeds/${feed}/json`\n// highlight-end\n')),(0,a.kt)("h2",{id:"publish-data"},"Publish data"),(0,a.kt)("p",null,"With the MQTT client and the topic, we can add a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"mqtt.publish")," in the scheduled worker\nto upload the data to Adafruit (note that ",(0,a.kt)("inlineCode",{parentName:"p"},"{ value }")," expands to JSON ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "value": value }')," automatically)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"schedule(\n    async () => {        \n        ...\n        // publish data to Adafruit\n        // highlight-next-line\n        await mqtt.publish(topic, { value })\n    },\n    { timeout: 1000, interval: 60000 }\n)\n")),(0,a.kt)("h2",{id:"all-together"},"All together"),(0,a.kt)("p",null,"Putting all the pieces together we get the following program."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// hardware configuration and drivers\nimport "@dsboard/adafruit_qt_py_c3"\nimport { startSHTC3 } from "@devicescript/drivers"\nimport { startMQTTClient } from "@devicescript/net"\n// extra APIs\nimport { readSetting } from "@devicescript/settings"\nimport { schedule } from "@devicescript/runtime"\n\n// mounting a temperature server for the SHTC3 sensor\nconst { temperature } = await startSHTC3()\n\n// update feed key\nconst feed = "temperature"\nconst username = await readSetting("IO_USERNAME")\n// this secret is stored in the .env.local and uploaded to the device settings\nconst password = await readSetting("IO_KEY")\n\nconst mqtt = await startMQTTClient({\n    host: `io.adafruit.com`,\n    proto: "tls",\n    port: 8883,\n    username,\n    password,\n})\n// https://io.adafruit.com/api/docs/mqtt.html#feed-topic-format\nconst topic = `${username}/feeds/${feed}/json`\n\nschedule(\n    async () => {\n        // read data from temperature sensor\n        const value = await temperature.reading.read()\n        // publish to feed topic\n        await mqtt.publish(topic, { value })\n    },\n    { timeout: 1000, interval: 60000 }\n)\n')),(0,a.kt)("h2",{id:"extra-points-filtering-data"},"Extra points: Filtering data"),(0,a.kt)("p",null,"You could use ",(0,a.kt)("a",{parentName:"p",href:"/developer/observables"},"observables")," to smooth the sensor\ndata. For example, apply an exponentially moving average\non the feed of temperature readings."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { ewma, auditTime } from "@devicescript/observables"\n...\ntemperature.reading\n    .pipe(ewma(0.5), auditTime(60000))\n    .subscribe(async value => await mqtt.publish(topic, { value }))\n')))}c.isMDXComponent=!0},988:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/temperature-mqtt-66b380e4e9c8659f93f2571bc8672633.jpg"}}]);