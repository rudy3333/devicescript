"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8634],{35318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(27378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(n),f=l,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:l,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},85972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(25773),l=(n(27378),n(35318));const i={},a="PixelBuffer",o={unversionedId:"api/runtime/pixelbuffer",id:"api/runtime/pixelbuffer",title:"PixelBuffer",description:"A 1D color vector to support color manipulation of LED strips. All colors are 24bit RGB colors.",source:"@site/docs/api/runtime/pixelbuffer.mdx",sourceDirName:"api/runtime",slug:"/api/runtime/pixelbuffer",permalink:"/devicescript/api/runtime/pixelbuffer",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Palette",permalink:"/devicescript/api/runtime/palette"},next:{title:"schedule",permalink:"/devicescript/api/runtime/schedule"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"<code>at</code>, <code>setAt</code>",id:"at-setat",level:3},{value:"<code>clear</code>",id:"clear",level:3},{value:"<code>view</code>",id:"view",level:3},{value:"<code>correctGamma</code>",id:"correctgamma",level:3},{value:"<code>rotate</code>",id:"rotate",level:3},{value:"Helpers",id:"helpers",level:2},{value:"<code>fillSolid</code>",id:"fillsolid",level:3},{value:"<code>fillRainbow</code>",id:"fillrainbow",level:3},{value:"<code>fillGradient</code>",id:"fillgradient",level:3},{value:"<code>fillPalette</code>",id:"fillpalette",level:3},{value:"<code>fillBarGraph</code>",id:"fillbargraph",level:3}],s={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"pixelbuffer"},"PixelBuffer"),(0,l.kt)("p",null,"A 1D color vector to support color manipulation of LED strips. All colors are 24bit RGB colors."),(0,l.kt)("p",null,"The pixel buffer is typically accessed through a ",(0,l.kt)("a",{parentName:"p",href:"/api/clients/led"},"Led")," client."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport "@devicescript/runtime"\n\nconst led = new Led()\n// highlight-next-line\nconst pixels = await led.buffer()\n')),(0,l.kt)("p",null,"It can also be allocated using ",(0,l.kt)("inlineCode",{parentName:"p"},"pixelBuffer"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { PixelBuffer } from "@devicescript/runtime"\n\n// highlight-next-line\nconst pixels = PixelBuffer.alloc(32)\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"at-setat"},(0,l.kt)("inlineCode",{parentName:"h3"},"at"),", ",(0,l.kt)("inlineCode",{parentName:"h3"},"setAt")),(0,l.kt)("p",null,"Indexing functions similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"Array.at"),", they allow to set color of individual LEDs and support negative indices."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"const c0 = pixels.at(0)\npixels.setAt(1, c0)\n")),(0,l.kt)("h3",{id:"clear"},(0,l.kt)("inlineCode",{parentName:"h3"},"clear")),(0,l.kt)("p",null,"Clears all colors to ",(0,l.kt)("inlineCode",{parentName:"p"},"#000000"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"pixels.clear()\n")),(0,l.kt)("h3",{id:"view"},(0,l.kt)("inlineCode",{parentName:"h3"},"view")),(0,l.kt)("p",null,"Creates a aliased range view of the buffer so that you can apply operations on a subset of the colors."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"const view = pixels.view(5, 10)\nview.clear()\n")),(0,l.kt)("h3",{id:"correctgamma"},(0,l.kt)("inlineCode",{parentName:"h3"},"correctGamma")),(0,l.kt)("p",null,"Applies gamma correction to compensate LED and eye perception"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"// highlight-next-line\npixels.correctGamma()\n")),(0,l.kt)("h3",{id:"rotate"},(0,l.kt)("inlineCode",{parentName:"h3"},"rotate")),(0,l.kt)("p",null,"Shifts the colors in the buffer by the given offset. Use a negative offset to shift right."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},"pixels.rotate(-1)\n")),(0,l.kt)("h2",{id:"helpers"},"Helpers"),(0,l.kt)("p",null,"Here are a few helpers built for ",(0,l.kt)("inlineCode",{parentName:"p"},"PixelBuffer"),", but many other could be added!"),(0,l.kt)("h3",{id:"fillsolid"},(0,l.kt)("inlineCode",{parentName:"h3"},"fillSolid")),(0,l.kt)("p",null,"This helper function asigns the given color to the entire range."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport { fillSolid } from "@devicescript/runtime"\n\nconst led = new Led()\nconst pixels = await led.buffer()\n\n// highlight-next-line\nfillSolid(pixels, 0x00_ff_00)\n\nawait led.show()\n')),(0,l.kt)("h3",{id:"fillrainbow"},(0,l.kt)("inlineCode",{parentName:"h3"},"fillRainbow")),(0,l.kt)("p",null,"Fills the buffer by interpolating the hue of ",(0,l.kt)("inlineCode",{parentName:"p"},"hsv")," colors."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport { fillRainbow } from "@devicescript/runtime"\n\nconst led = new Led()\nconst pixels = await led.buffer()\n\n// highlight-next-line\nfillRainbow(pixels)\n\nawait led.show()\n')),(0,l.kt)("p",null,"By default, the helper interpolates between ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"0xff"),",\nbut this can be changed with optional parameters."),(0,l.kt)("h3",{id:"fillgradient"},(0,l.kt)("inlineCode",{parentName:"h3"},"fillGradient")),(0,l.kt)("p",null,"Fills with a linear interpolation of two colors accross the RGB space."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport { fillGradient } from "@devicescript/runtime"\n\nconst led = new Led()\nconst pixels = await led.buffer()\n\n// highlight-next-line\nfillGradient(pixels, 0x00_ff_00, 0x00_00_ff, { circular: true })\n\nawait led.show()\n')),(0,l.kt)("h3",{id:"fillpalette"},(0,l.kt)("inlineCode",{parentName:"h3"},"fillPalette")),(0,l.kt)("p",null,"Fills by interpolating the colors of a palette."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport { Palette } from "@devicescript/graphics"\nimport { fillPalette } from "@devicescript/runtime"\n\nconst led = new Led()\nconst pixels = await led.buffer()\nconst palette = Palette.arcade()\n\n// highlight-next-line\nfillPalette(pixels, palette)\n\nawait led.show()\n')),(0,l.kt)("h3",{id:"fillbargraph"},(0,l.kt)("inlineCode",{parentName:"h3"},"fillBarGraph")),(0,l.kt)("p",null,"A tiny bar chart engine to render on a value on a LED strip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { Led } from "@devicescript/core"\nimport { fillBarGraph } from "@devicescript/runtime"\n\nconst led = new Led()\nconst pixels = await led.buffer()\n\nconst current = 25\nconst max = 100\n\n// highlight-next-line\nfillBarGraph(pixels, current, max)\n\nawait led.show()\n')))}u.isMDXComponent=!0}}]);